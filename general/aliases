#
# Principais Alias de ações
#
alias zshconfig="nvim ~/.zshrc"
alias ohmyzsh="nvim ~/.oh-my-zsh"

# Usando code como editor
alias zedit="cd ~/.zshcustoms/ ; nvim"
alias zlocal="nvim ~/.zshlocal"

# Atalhos para o SSH
if [ "$TERM" = "xterm-kitty" ] ; then
   alias ssh="kitty +kitten ssh -oStrictHostKeyChecking=no"
else
   alias ssh="ssh -oStrictHostKeyChecking=no"
fi
alias scp="scp -oStrictHostKeyChecking=no"
alias sftp="sftp -oStrictHostKeyChecking=no"

# Alias gerais
export LESS='-R'
alias x="exit"
if [ -f /usr/local/bin/exa ] ; then
    alias ls="exa --icons --color-scale"
fi
alias l="ls -la"
alias ll="ls -la"

if [ -f /usr/local/bat ] ; then
    alias cat="bat --paging=never"
fi

alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias diff='diff --color=auto'
# command -v lsd &> /dev/null && alias ls='lsd --group-dirs first'
# command -v colorls &> /dev/null && alias ls='colorls --sd --gs'
command -v htop &> /dev/null && alias top='htop'
command -v gotop &> /dev/null && alias top='gotop -p'

# if [ -f /usr/local/bin/colorls ] ; then
#     alias ls="/usr/local/bin/colorls"
# fi

# Alias do Swarm
alias dls="docker service ls"
alias dlogs="docker service logs -f --tail 20"
alias dupdate="docker service update"

function zupdate {
    touch /tmp/.zshcustoms_`whoami`
    upgrade_oh_my_zsh
    bash $HOME/.zshcustoms/install.sh
}

function dsps {
    if [ -f docker-compose.yml ] ; then
        PROJETO=${PWD##*/}
    else
        PROJETO=$1
    fi
    watch -n 1 "docker stack ps --no-trunc $PROJETO"
}

function ddeploy {
    if [ ! -f docker-compose.yml ] ; then
        echo O diretório atual não contém um projeto do swarm.
        echo Esta faltando o arquivo: docker-compose.yml
        echo
        exit 1        
    fi

    if [ -f prepare.sh ] ; then
        echo "Executando script de preparação: prepare.sh"
        bash prepare.sh
    fi

    PROJETO=${PWD##*/}
    echo Projeto: $PROJETO
    docker stack deploy --with-registry-auth -c docker-compose.yml $PROJETO
    watch -n 1 docker stack ps $PROJETO
}

function dhealth {
    container=$1
    docker service inspect $container | jq '.[].Spec.TaskTemplate.ContainerSpec.Healthcheck'
}

function devents {
    docker events --format '{{json .}}' | jq 'select(.Action | test("(exec_start|exec_create|exec_die)") | not)'
}

function drm {
    if [ ! -f docker-compose.yml ] ; then
        echo O diretório atual não contém um projeto do swarm.
        echo Esta faltando o arquivo: docker-compose.yml
        echo
        exit 1
    fi
    PROJETO=${PWD##*/}
    echo Projeto: $PROJETO
    docker stack ps $PROJETO
    watch -n 1 docker stack rm $PROJETO
}

function remoteclip {
    while true ; do
        echo "Aguardando buffer: `date`"
        nc -l 2000 | pbcopy
    done
}

function typescript-prettier-eslint {
    echo "Preparando projeto..."
    if [ ! -f package.json ] ; then
        npm init -y
    fi

    cat << _EOF > .eslintrc.js
module.exports = {
    env: {
        es2021: true,
        node: true,
    },
    extends: ['airbnb-base', 'prettier'],
    parser: '@typescript-eslint/parser',
    parserOptions: {
        ecmaVersion: 12,
        sourceType: 'module',
    },
    plugins: ['@typescript-eslint', 'import'],
    rules: {
        'no-shadow': 'off',
        'class-methods-use-this': 'off',
        'no-console': 'warn',
        '@typescript-eslint/no-shadow': ['error'],
        'import/prefer-default-export': 0,
        'import/no-cycle': 0,
        'import/extensions': [
            'error',
            'ignorePackages',
            {
                js: 'never',
                jsx: 'never',
                ts: 'never',
                tsx: 'never',
            },
        ],
    },
    settings: {
        'import/resolver': {
            node: {
                extensions: ['.js', '.jsx', '.ts', '.tsx'],
            },
            alias: {
                map: [['@src', './src']],
                extensions: ['.js', '.jsx', '.ts', '.tsx'],
            },
        },
        react: {
            version: 'latest',
        },
    },
};
_EOF

    cat << _EOF > .prettierrc.js
module.exports = {
    semi: true,
    trailingComma: 'all',
    singleQuote: true,
    printWidth: 120,
    tabWidth: 4,
    jsxBracketSameLine: true,
};
_EOF

    cat << _EOF > .gitignore
# Created by https://www.toptal.com/developers/gitignore/api/node,visualstudiocode,macos
# Edit at https://www.toptal.com/developers/gitignore?templates=node,visualstudiocode,macos

### macOS ###
# General
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon


# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

### Node ###
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test
.env.production

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

### Node Patch ###
# Serverless Webpack directories
.webpack/

# Optional stylelint cache
.stylelintcache

# SvelteKit build / generate output
.svelte-kit

### VisualStudioCode ###
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
*.code-workspace

# Local History for Visual Studio Code
.history/

### VisualStudioCode Patch ###
# Ignore all local history of files
.history
.ionide

# Support for Project snippet scope
!.vscode/*.code-snippets

# End of https://www.toptal.com/developers/gitignore/api/node,visualstudiocode,macos
_EOF

    npm install --save-dev @types/node @typescript-eslint/eslint-plugin @typescript-eslint/parser eslint \
        eslint-config-airbnb-base eslint-config-prettier eslint-plugin-import prettier ts-node typescript

    if [ ! -f tsconfig.json ] ; then
        npx tsc --init
    fi

    if [ ! -d src ] ; then
        mkdir src
    fi

    if [ ! -f src/index.ts ] ; then
        cat << _EOF > src/index.ts
const bootstrap = async () => {
    console.log('Starting...');
};

bootstrap().catch((err) => {
    console.log('General fail:', err);
});
_EOF
    fi

    cat << _EOF > .package.json.js
const fs = require('fs');
const path = require('path');
const packageJson = require('./package.json');

if (!packageJson.scripts) {
    packageJson.scripts = {}
}

if (!packageJson.scripts.start) {
    packageJson.scripts.start = 'ts-node src/index.ts';
}

if (!packageJson.scripts.lint) {
    packageJson.scripts.lint = 'eslint --fix src/**/*.ts';
}

const rawJson = JSON.stringify(packageJson, null, 4);
fs.writeFileSync(path.join(__dirname, 'package.json'), rawJson);
_EOF
    node .package.json.js
    rm -f .package.json.js

    ls -la
}

