#
# Principais Alias de ações
#
alias zshconfig="nvim ~/.zshrc"
alias ohmyzsh="nvim ~/.oh-my-zsh"

# Usando code como editor
alias zedit="cd ~/.zshcustoms/ ; nvim"
alias zlocal="nvim ~/.zshlocal"

# Atalhos para o SSH
if [ "$TERM" = "xterm-kitty" ] ; then
   alias ssh="kitty +kitten ssh -oStrictHostKeyChecking=no"
else
   alias ssh="ssh -oStrictHostKeyChecking=no"
fi
alias scp="scp -oStrictHostKeyChecking=no"
alias sftp="sftp -oStrictHostKeyChecking=no"

# Alias gerais
export LESS='-R'
alias x="exit"
if [ -f /usr/local/bin/exa ] ; then
    alias ls="exa --icons --color-scale"
fi
alias l="ls -la"
alias ll="ls -la"

if [ -f /usr/local/bat ] ; then
    alias cat="bat --paging=never"
fi

alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias diff='diff --color=auto'
# command -v lsd &> /dev/null && alias ls='lsd --group-dirs first'
# command -v colorls &> /dev/null && alias ls='colorls --sd --gs'
command -v htop &> /dev/null && alias top='htop'
command -v gotop &> /dev/null && alias top='gotop -p'

# if [ -f /usr/local/bin/colorls ] ; then
#     alias ls="/usr/local/bin/colorls"
# fi

# Alias do Swarm
alias dls="docker service ls"
alias dlogs="docker service logs -f --tail 20"
alias dupdate="docker service update"

function zupdate {
    touch /tmp/.zshcustoms_`whoami`
    upgrade_oh_my_zsh
    bash $HOME/.zshcustoms/install.sh
}

function dsps {
    if [ -f docker-compose.yml ] ; then
        PROJETO=${PWD##*/}
    else
        PROJETO=$1
    fi
    watch -n 1 "docker stack ps --no-trunc $PROJETO"
}

function ddeploy {
    if [ ! -f docker-compose.yml ] ; then
        echo O diretório atual não contém um projeto do swarm.
        echo Esta faltando o arquivo: docker-compose.yml
        echo
        exit 1        
    fi

    if [ -f prepare.sh ] ; then
        echo "Executando script de preparação: prepare.sh"
        bash prepare.sh
    fi

    PROJETO=${PWD##*/}
    echo Projeto: $PROJETO
    docker stack deploy --with-registry-auth -c docker-compose.yml $PROJETO
    watch -n 1 docker stack ps $PROJETO
}

function dhealth {
    container=$1
    docker service inspect $container | jq '.[].Spec.TaskTemplate.ContainerSpec.Healthcheck'
}

function devents {
    docker events --format '{{json .}}' | jq 'select(.Action | test("(exec_start|exec_create|exec_die)") | not)'
}

function drm {
    if [ ! -f docker-compose.yml ] ; then
        echo O diretório atual não contém um projeto do swarm.
        echo Esta faltando o arquivo: docker-compose.yml
        echo
        exit 1
    fi
    PROJETO=${PWD##*/}
    echo Projeto: $PROJETO
    docker stack ps $PROJETO
    watch -n 1 docker stack rm $PROJETO
}

function remoteclip {
    while true ; do
        echo "Aguardando buffer: `date`"
        nc -l 2000 | pbcopy
    done
}

function typescript-download {
    GIST="https://gist.githubusercontent.com/nsfilho/aaaa7afeb3169a695efb3231c6d37c82/raw"
    nomeArquivo=$1
    if [ ! -f $nomeArquivo ] ; then
        nomeDownload=$(echo $nomeArquivo | sed "s/\//_/")
        wget -O $nomeArquivo "$GIST/$nomeDownload"
    fi
}

function typescript-prettier-eslint {
    echo "Preparando projeto..."
    if [ ! -f package.json ] ; then
        npm init -y
        npm pkg delete scripts.test
    fi

    npm pkg set scripts.prepare="husky install"
    npm pkg set scripts.postlint="tsc --noEmit -p tsconfig.json"
    npm pkg set scripts.format="prettier --write src/**/*.ts package.json"
    npm pkg set scripts.lint="eslint --fix src/**/*.ts"
    npm pkg set scripts.start="DEBUG=* ts-node src/index.ts"
    npm pkg set scripts.build="tsc"

    npm install --save-dev @types/node @typescript-eslint/eslint-plugin @typescript-eslint/parser eslint \
        eslint-config-airbnb-base eslint-config-prettier eslint-plugin-import prettier ts-node typescript \
        husky

    npm install debug axios dayjs nanoid@3.3.4
    npx husky install

    typescript-download README.md
    typescript-download .eslintrc.js
    typescript-download tsconfig.json
    typescript-download .prettierrc.js
    typescript-download Dockerfile
    typescript-download entrypoint.sh
    typescript-download .gitlab-ci.yml
    typescript-download .gitignore

    if [ -f entrypoint.sh ] ; then
        chmod a+rx entrypoint.sh
    fi

    if [ ! -d src ] ; then
        mkdir src
    fi

    typescript-download "src/index.ts"
    typescript-download ".husky/pre-commit"

    if [ -f .husky/pre-commit ] ; then
        chmod a+rx .husky/pre-commit
    fi

    ls -la
}

